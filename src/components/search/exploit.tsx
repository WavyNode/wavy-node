"use client";

import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import axiosInstance from "@/lib/auth";
import { IExploit } from "@/types/exploit.type";

 type Status = "Resolved" | "Ongoing" | "Partially Resolved";

 const statusStyles = {
   Resolved: "bg-green-100 text-green-700",
   Ongoing: "bg-red-100 text-red-700",
   "Partially Resolved": "bg-yellow-100 text-yellow-700",
 };

 function StatusBadge({ status }: { status: Status }) {
   return (
     <span
       className={`inline-flex items-center px-3 py-0.5 rounded-full text-xs font-semibold ${statusStyles[status]}`}
     >
       {status}
     </span>
   );
 }

 export default function LastExploits() {
   const [exploits, setExploits] = useState<IExploit[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);

   const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
   const arbChainId = process.env.NEXT_PUBLIC_ARB_CHAIN_ID;
   const arbChainIdNumber = arbChainId ? parseInt(arbChainId) : undefined;

  
   useEffect(() => {
     const fetchExploits = async () => {
       try {
        const res = await axiosInstance.get(`${baseUrl}/exploits?chainId=${arbChainId}`);
         console.log({ res: res.data });

         const sortedExploits = res.data.data.sort((a: IExploit, b: IExploit) => {
           const dateA = new Date(a.timestamp).getTime();
           const dateB = new Date(b.timestamp).getTime();
           return dateB - dateA;
         });

         setExploits(sortedExploits);
       } catch (err: any) {
         setError(err.message || "Something went wrong");
       } finally {
         setLoading(false);
       }
     };

     fetchExploits();
   }, [baseUrl, arbChainId]);

   if (loading) return null;
   if (error) {
     console.error(error);
     return <p className="text-center text-red-500">{error}</p>;
   }

   return (
     <div className="bg-white">
       <div className="space-y-6">
         <h2 className="text-xl text-center text-gray-800">Last Exploits</h2>

         <Card className="border border-gray-200 shadow-sm rounded-lg">
           <CardContent className="p-0">
             <div className="overflow-x-auto">
               <Table className="w-full text-gray-800">
                 <TableHeader>
                   <TableRow className="bg-gray-100 border-b border-gray-300">
                     <TableHead className="text-left text-sm font-semibold text-gray-600 px-4 py-3">
                       Date
                     </TableHead>
                     <TableHead className="text-left text-sm font-semibold text-gray-600 px-4 py-3">
                       Network
                     </TableHead>
                     <TableHead className="text-left text-sm font-semibold text-gray-600 px-4 py-3">
                       Attack Vector
                     </TableHead>
                     <TableHead className="text-left text-sm font-semibold text-gray-600 px-4 py-3">
                       Amount Lost
                     </TableHead>
                     <TableHead className="text-left text-sm font-semibold text-gray-600 px-4 py-3">
                       Status
                     </TableHead>
                   </TableRow>
                 </TableHeader>
                 <TableBody>
                   {exploits.map((exploit, index) => (
                     <TableRow
                       key={index}
                       className="hover:bg-gray-50 border-b border-gray-200"
                     >
                       <TableCell className="px-4 py-3">
                         {new Date(exploit.timestamp).toLocaleDateString()}
                       </TableCell>
                       <TableCell className="px-4 py-3">
                         {exploit.chain_id === arbChainIdNumber ? "Arbitrum" : exploit.chain_id}
                       </TableCell>
                       <TableCell className="px-4 py-3">{exploit.title}</TableCell>
                       <TableCell className="px-4 py-3">{exploit.amount}</TableCell>
                       <TableCell className="px-4 py-3">
                         <StatusBadge status={exploit.status as Status} />
                       </TableCell>
                     </TableRow>
                   ))}
                 </TableBody>
               </Table>
             </div>
           </CardContent>
         </Card>
       </div>
     </div>
   );
 }
